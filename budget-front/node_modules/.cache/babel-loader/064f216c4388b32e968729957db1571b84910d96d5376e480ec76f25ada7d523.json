{"ast":null,"code":"var _jsxFileName = \"/home/edu/edu/repositorios/Budget-app/budget-front/src/components/BalanceCard.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { Grid, Paper, Typography, MenuItem, Select, FormControl, InputLabel } from \"@mui/material\";\nimport \"../styles/dashboard.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BalanceCard = () => {\n  _s();\n  const [accounts, setAccounts] = useState([]); // Stores all user accounts\n  const [selectedAccount, setSelectedAccount] = useState(\"\"); // Currently selected account\n  const [balance, setBalance] = useState(null); // Balance of selected account\n  const [currency, setCurrency] = useState(\"\"); // Currency of the selected account\n  const [loading, setLoading] = useState(true); // Track loading state\n\n  // Fetch user accounts\n  const fetchAccounts = async () => {\n    const token = localStorage.getItem(\"access_token\");\n    try {\n      const response = await fetch(\"http://127.0.0.1:8000/api/v1/accounts/\", {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${token}`\n        }\n      });\n      if (!response.ok) throw new Error(`HTTP Error: ${response.status}`);\n      const data = await response.json();\n      if (!Array.isArray(data) || data.length === 0) {\n        console.error(\"No accounts found.\");\n        setLoading(false);\n        return;\n      }\n      setAccounts(data);\n      setSelectedAccount(data[0].name); // Select first account by default\n      fetchAccountBalance(data[0].name);\n    } catch (error) {\n      console.error(\"Error fetching accounts:\", error);\n      setLoading(false);\n    }\n  };\n\n  // Fetch balance of the selected account\n  const fetchAccountBalance = async accountName => {\n    setLoading(true); // Start loading when fetching new balance\n    const token = localStorage.getItem(\"access_token\");\n    try {\n      const response = await fetch(`http://127.0.0.1:8000/api/v1/accounts/balance/${encodeURIComponent(accountName)}/`, {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${token}`\n        }\n      });\n      if (!response.ok) throw new Error(`HTTP Error: ${response.status}`);\n      const data = await response.json();\n      setBalance(data.accountBalance);\n      setCurrency(data.currency);\n    } catch (error) {\n      console.error(\"Error fetching account balance:\", error);\n    }\n    setLoading(false); // Stop loading after request\n  };\n\n  // Handle account selection change\n  const handleAccountChange = event => {\n    const newAccount = event.target.value;\n    setSelectedAccount(newAccount);\n    fetchAccountBalance(newAccount);\n  };\n  useEffect(() => {\n    fetchAccounts();\n  }, []);\n\n  // Card styles\n  const cardStyle = {\n    padding: \"20px\",\n    textAlign: \"center\",\n    borderRadius: \"10px\",\n    boxShadow: \"0 4px 8px rgba(0, 0, 0, 0.1)\",\n    background: \"#ffffff\"\n  };\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    container: true,\n    spacing: 3,\n    justifyContent: \"center\",\n    children: [/*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: 12,\n      sm: 8,\n      md: 6,\n      children: /*#__PURE__*/_jsxDEV(FormControl, {\n        fullWidth: true,\n        children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n          children: \"Selecciona una cuenta\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Select, {\n          value: selectedAccount,\n          onChange: handleAccountChange,\n          children: accounts.length > 0 ? accounts.map(account => /*#__PURE__*/_jsxDEV(MenuItem, {\n            value: account.name,\n            children: account.name\n          }, account.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 33\n          }, this)) : /*#__PURE__*/_jsxDEV(MenuItem, {\n            disabled: true,\n            children: \"No accounts available\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 29\n          }, this) // âœ… Fallback UI\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: 12,\n      sm: 8,\n      md: 6,\n      children: /*#__PURE__*/_jsxDEV(Paper, {\n        style: cardStyle,\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h5\",\n          color: \"primary\",\n          children: selectedAccount ? selectedAccount : \"Seleccione una cuenta\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h4\",\n          children: loading ? \"Cargando...\" : balance !== null ? `${balance.toLocaleString()} ${currency}` : \"Sin saldo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 9\n  }, this);\n};\n_s(BalanceCard, \"GUFspn9Q1LUwtQa+CkSUpApWnYk=\");\n_c = BalanceCard;\nexport default BalanceCard;\nvar _c;\n$RefreshReg$(_c, \"BalanceCard\");","map":{"version":3,"names":["React","useEffect","useState","Grid","Paper","Typography","MenuItem","Select","FormControl","InputLabel","jsxDEV","_jsxDEV","BalanceCard","_s","accounts","setAccounts","selectedAccount","setSelectedAccount","balance","setBalance","currency","setCurrency","loading","setLoading","fetchAccounts","token","localStorage","getItem","response","fetch","headers","Authorization","ok","Error","status","data","json","Array","isArray","length","console","error","name","fetchAccountBalance","accountName","encodeURIComponent","accountBalance","handleAccountChange","event","newAccount","target","value","cardStyle","padding","textAlign","borderRadius","boxShadow","background","container","spacing","justifyContent","children","item","xs","sm","md","fullWidth","fileName","_jsxFileName","lineNumber","columnNumber","onChange","map","account","id","disabled","style","variant","color","toLocaleString","_c","$RefreshReg$"],"sources":["/home/edu/edu/repositorios/Budget-app/budget-front/src/components/BalanceCard.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Grid, Paper, Typography, MenuItem, Select, FormControl, InputLabel } from \"@mui/material\";\nimport \"../styles/dashboard.css\";\n\nconst BalanceCard = () => {\n    const [accounts, setAccounts] = useState([]); // Stores all user accounts\n    const [selectedAccount, setSelectedAccount] = useState(\"\"); // Currently selected account\n    const [balance, setBalance] = useState(null); // Balance of selected account\n    const [currency, setCurrency] = useState(\"\"); // Currency of the selected account\n    const [loading, setLoading] = useState(true); // Track loading state\n\n    // Fetch user accounts\n    const fetchAccounts = async () => {\n        const token = localStorage.getItem(\"access_token\");\n        try {\n            const response = await fetch(\"http://127.0.0.1:8000/api/v1/accounts/\", {\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                    Authorization: `Bearer ${token}`,\n                },\n            });\n\n            if (!response.ok) throw new Error(`HTTP Error: ${response.status}`);\n\n            const data = await response.json();\n\n            if (!Array.isArray(data) || data.length === 0) {\n                console.error(\"No accounts found.\");\n                setLoading(false);\n                return;\n            }\n\n            setAccounts(data);\n            setSelectedAccount(data[0].name); // Select first account by default\n            fetchAccountBalance(data[0].name);\n        } catch (error) {\n            console.error(\"Error fetching accounts:\", error);\n            setLoading(false);\n        }\n    };\n\n    // Fetch balance of the selected account\n    const fetchAccountBalance = async (accountName) => {\n        setLoading(true); // Start loading when fetching new balance\n        const token = localStorage.getItem(\"access_token\");\n        try {\n            const response = await fetch(`http://127.0.0.1:8000/api/v1/accounts/balance/${encodeURIComponent(accountName)}/`, {\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                    Authorization: `Bearer ${token}`,\n                },\n            });\n\n            if (!response.ok) throw new Error(`HTTP Error: ${response.status}`);\n\n            const data = await response.json();\n            setBalance(data.accountBalance);\n            setCurrency(data.currency);\n        } catch (error) {\n            console.error(\"Error fetching account balance:\", error);\n        }\n        setLoading(false); // Stop loading after request\n    };\n\n    // Handle account selection change\n    const handleAccountChange = (event) => {\n        const newAccount = event.target.value;\n        setSelectedAccount(newAccount);\n        fetchAccountBalance(newAccount);\n    };\n\n    useEffect(() => {\n        fetchAccounts();\n    }, []);\n\n    // Card styles\n    const cardStyle = {\n        padding: \"20px\",\n        textAlign: \"center\",\n        borderRadius: \"10px\",\n        boxShadow: \"0 4px 8px rgba(0, 0, 0, 0.1)\",\n        background: \"#ffffff\",\n    };\n\n    return (\n        <Grid container spacing={3} justifyContent=\"center\">\n            {/* Account Selection */}\n            <Grid item xs={12} sm={8} md={6}>\n                <FormControl fullWidth>\n                    <InputLabel>Selecciona una cuenta</InputLabel>\n                    <Select value={selectedAccount} onChange={handleAccountChange}>\n                        {accounts.length > 0 ? (\n                            accounts.map((account) => (\n                                <MenuItem key={account.id} value={account.name}>\n                                    {account.name}\n                                </MenuItem>\n                            ))\n                        ) : (\n                            <MenuItem disabled>No accounts available</MenuItem> // âœ… Fallback UI\n                        )}\n                    </Select>\n                </FormControl>\n            </Grid>\n\n            {/* Balance Card */}\n            <Grid item xs={12} sm={8} md={6}>\n                <Paper style={cardStyle}>\n                    <Typography variant=\"h5\" color=\"primary\">\n                        {selectedAccount ? selectedAccount : \"Seleccione una cuenta\"}\n                    </Typography>\n                    <Typography variant=\"h4\">\n                        {loading ? \"Cargando...\" : balance !== null ? `${balance.toLocaleString()} ${currency}` : \"Sin saldo\"}\n                    </Typography>\n                </Paper>\n            </Grid>\n        </Grid>\n    );\n};\n\nexport default BalanceCard;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}