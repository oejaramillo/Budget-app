{"ast":null,"code":"var _jsxFileName = \"/home/edu/edu/repositorios/Budget-app/budget-front/src/components/BalanceCard.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { Grid2, Paper, Typography, MenuItem, Select, FormControl, InputLabel } from \"@mui/material\";\nimport \"../styles/dashboard.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BalanceCard = () => {\n  _s();\n  const [accounts, setAccounts] = useState([]);\n  const [selectedAccount, setSelectedAccount] = useState(\"\");\n  const [balance, setBalance] = useState(null);\n  const [currency, setCurrency] = useState(\"\");\n\n  // Token management\n  const refreshToken = async () => {\n    try {\n      const refresh = localStorage.getItem(\"refresh_token\");\n      if (!refresh) throw new Error(\"No refresh token found!\");\n      const response = await fetch(\"http://127.0.0.1:8000/api/v1/auth/token/refresh/\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          refresh\n        })\n      });\n      if (!response.ok) throw new Error(\"Failed to refresh token\");\n      const data = await response.json();\n      localStorage.setItem(\"access_token\", data.access);\n      console.log(\"Token refreshed:\", data.access);\n      return data.access;\n    } catch (error) {\n      console.error(\"Error refreshing token:\", error);\n      return null;\n    }\n  };\n\n  // Fetching API\n  // Fetch user accounts\n  const fetchAccounts = async () => {\n    let token = localStorage.getItem(\"access_token\");\n    const fetchData = async token => {\n      return fetch(\"http://127.0.0.1:8000/api/v1/accounts/\", {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${token}`\n        }\n      });\n    };\n    let response = await fetchData(token);\n\n    // If token is expired, refresh it and retry\n    if (response.status === 401) {\n      token = await refreshToken();\n      if (token) {\n        response = await fetchData(token);\n      }\n    }\n    if (response.ok) {\n      const data = await response.json();\n      setAccounts(data);\n      if (data.length > 0) {\n        setSelectedAccount(data[0].name); // Set the first account as default\n        fetchAccountBalance(data[0].name);\n      }\n    }\n  };\n\n  // Fetch balance of the selected account\n  const fetchAccountBalance = async accountName => {\n    let token = localStorage.getItem(\"access_token\");\n    const fetchData = async token => {\n      return fetch(`http://127.0.0.1:8000/api/v1/accounts/balance/${encodeURIComponent(accountName)}/`, {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${token}`\n        }\n      });\n    };\n    let response = await fetchData(token);\n\n    // If token is expired, refresh it and retry\n    if (response.status === 401) {\n      token = await refreshToken();\n      if (token) {\n        response = await fetchData(token);\n      }\n    }\n    if (response.ok) {\n      const data = await response.json();\n      setBalance(data.balance);\n      setCurrency(data.currency);\n    }\n  };\n\n  // Hnadle account selection change\n  const handleAccountChange = event => {\n    const newAccount = event.target.value;\n    setSelectedAccount(newAccount);\n    fetchAccountBalance(newAccount);\n  };\n  useEffect(() => {\n    fetchAccounts();\n  }, []);\n\n  // Card styles\n  const cardStyle = {\n    padding: \"20px\",\n    textAlign: \"center\",\n    borderRadius: \"10px\",\n    boxShadow: \"0 4px 8px rgba(0, 0, 0, 0.1)\",\n    background: \"#ffffff\"\n  };\n  return /*#__PURE__*/_jsxDEV(Grid2, {\n    container: true,\n    spacing: 3,\n    justifyContent: \"center\",\n    children: [/*#__PURE__*/_jsxDEV(Grid2, {\n      item: true,\n      xs: 12,\n      sm: 8,\n      md: 6,\n      children: /*#__PURE__*/_jsxDEV(FormControl, {\n        fullWidth: true,\n        children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n          children: \"Selecciona una cuenta\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Select, {\n          value: selectedAccount,\n          onChange: handleAccountChange,\n          children: accounts.map(account => /*#__PURE__*/_jsxDEV(MenuItem, {\n            value: account.name,\n            children: account.name\n          }, account.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Grid2, {\n      item: true,\n      xs: 12,\n      sm: 8,\n      md: 6,\n      children: /*#__PURE__*/_jsxDEV(Paper, {\n        style: cardStyle,\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h5\",\n          color: \"primary\",\n          children: selectedAccount ? selectedAccount : \"Seleccione una cuenta\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h4\",\n          children: balance !== null ? `${balance.toLocaleString()} ${currency}` : \"Cargando...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 120,\n    columnNumber: 9\n  }, this);\n};\n_s(BalanceCard, \"FPCgUzZX3qR1GKXOe20Ex0i5PFE=\");\n_c = BalanceCard;\nexport default BalanceCard;\nvar _c;\n$RefreshReg$(_c, \"BalanceCard\");","map":{"version":3,"names":["React","useEffect","useState","Grid2","Paper","Typography","MenuItem","Select","FormControl","InputLabel","jsxDEV","_jsxDEV","BalanceCard","_s","accounts","setAccounts","selectedAccount","setSelectedAccount","balance","setBalance","currency","setCurrency","refreshToken","refresh","localStorage","getItem","Error","response","fetch","method","headers","body","JSON","stringify","ok","data","json","setItem","access","console","log","error","fetchAccounts","token","fetchData","Authorization","status","length","name","fetchAccountBalance","accountName","encodeURIComponent","handleAccountChange","event","newAccount","target","value","cardStyle","padding","textAlign","borderRadius","boxShadow","background","container","spacing","justifyContent","children","item","xs","sm","md","fullWidth","fileName","_jsxFileName","lineNumber","columnNumber","onChange","map","account","id","style","variant","color","toLocaleString","_c","$RefreshReg$"],"sources":["/home/edu/edu/repositorios/Budget-app/budget-front/src/components/BalanceCard.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Grid2, Paper, Typography, MenuItem, Select, FormControl, InputLabel } from \"@mui/material\";\nimport \"../styles/dashboard.css\";\n\nconst BalanceCard = () => {\n    const [accounts, setAccounts] = useState([]);\n    const [selectedAccount, setSelectedAccount] = useState(\"\");\n    const [balance, setBalance] = useState(null);\n    const [currency, setCurrency] = useState(\"\");\n\n    // Token management\n    const refreshToken = async () => {\n        try {\n        const refresh = localStorage.getItem(\"refresh_token\");\n        if (!refresh) throw new Error(\"No refresh token found!\");\n\n        const response = await fetch(\"http://127.0.0.1:8000/api/v1/auth/token/refresh/\", {\n            method: \"POST\",\n            headers: { \"Content-Type\": \"application/json\" },\n            body: JSON.stringify({ refresh }),\n        });\n\n        if (!response.ok) throw new Error(\"Failed to refresh token\");\n\n        const data = await response.json();\n        localStorage.setItem(\"access_token\", data.access);  \n        console.log(\"Token refreshed:\", data.access);\n        return data.access;\n        } catch (error) {\n        console.error(\"Error refreshing token:\", error);\n        return null;\n        }\n    };\n\n    // Fetching API\n    // Fetch user accounts\n    const fetchAccounts = async () => {\n        let token = localStorage.getItem(\"access_token\");\n\n        const fetchData = async (token) => {\n            return fetch(\"http://127.0.0.1:8000/api/v1/accounts/\", {\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                    Authorization: `Bearer ${token}`,\n                },\n            });\n        };\n\n        let response = await fetchData(token);\n\n        // If token is expired, refresh it and retry\n        if (response.status === 401) {\n            token = await refreshToken();\n            if (token) {\n            response = await fetchData(token);\n            }\n        }\n    \n        if (response.ok) {\n            const data = await response.json();\n            setAccounts(data);\n            if (data.length > 0) {\n                setSelectedAccount(data[0].name); // Set the first account as default\n                fetchAccountBalance(data[0].name);\n            }\n        }\n    };\n\n    // Fetch balance of the selected account\n    const fetchAccountBalance = async (accountName) => {\n        let token = localStorage.getItem(\"access_token\");\n\n        const fetchData = async (token) => {\n            return fetch(`http://127.0.0.1:8000/api/v1/accounts/balance/${encodeURIComponent(accountName)}/`, {\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                    Authorization: `Bearer ${token}`,\n                },\n            });\n        };\n\n        let response = await fetchData(token);\n\n        // If token is expired, refresh it and retry\n        if (response.status === 401) {\n            token = await refreshToken();\n            if (token) {\n            response = await fetchData(token);\n            }\n        }\n\n        if (response.ok) {\n            const data = await response.json();\n            setBalance(data.balance);\n            setCurrency(data.currency);\n            }\n    }\n\n    // Hnadle account selection change\n    const handleAccountChange = (event) => {\n        const newAccount = event.target.value;\n        setSelectedAccount(newAccount);\n        fetchAccountBalance(newAccount);\n    };\n\n    useEffect(() => {\n        fetchAccounts();\n    }, []);\n\n    // Card styles\n    const cardStyle = {\n        padding: \"20px\",\n        textAlign: \"center\",\n        borderRadius: \"10px\",\n        boxShadow: \"0 4px 8px rgba(0, 0, 0, 0.1)\",\n        background: \"#ffffff\",\n    };\n\n    return (\n        <Grid2 container spacing={3} justifyContent=\"center\">\n            <Grid2 item xs={12} sm={8} md={6}>\n                <FormControl fullWidth>\n                    <InputLabel>Selecciona una cuenta</InputLabel>\n                    <Select value={selectedAccount} onChange={handleAccountChange}>\n                        {accounts.map((account) => (\n                            <MenuItem key={account.id} value={account.name}>\n                                {account.name}\n                            </MenuItem>\n                        ))}\n                    </Select>\n                </FormControl>\n            </Grid2>\n\n            <Grid2 item xs={12} sm={8} md={6}>\n                <Paper style={cardStyle}>\n                    <Typography variant=\"h5\" color=\"primary\">\n                        {selectedAccount ? selectedAccount : \"Seleccione una cuenta\"}\n                    </Typography>\n                    <Typography variant=\"h4\">\n                        {balance !== null ? `${balance.toLocaleString()} ${currency}` : \"Cargando...\"}\n                    </Typography>\n                </Paper>\n            </Grid2>\n        </Grid2>\n    );\n};\n\nexport default BalanceCard;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}